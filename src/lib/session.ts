import { PrismaClient } from "@prisma/client";
import crypto from "crypto";

const prisma = new PrismaClient();

export interface SessionData {
  id: number;
  employeeID: string;
  email: string;
  name: string;
  nickname: string;
  department: string;
  position: string;
  imageUrl: string | null;
  mustChangePassword: boolean;
  titlePrefix: string | null;
  ppPhone: string | null;
  wPhone: string | null;
  birthday: string | null;
  departmentId: number | null;
  positionId: number | null;
  address: string | null;
  dayOff: string | null;
  educationLevel: string | null;
  university: string | null;
  major: string | null;
  bankName: string | null;
  bankAccountNumber: string | null;
  socialSecurityStart: string | null;
}

// ‡∏•‡∏ö generateDeviceId function - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß

// ‡∏™‡∏£‡πâ‡∏≤‡∏á session token
export function generateSessionToken(): string {
  return crypto.randomBytes(32).toString('hex');
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
export async function createSession(employeeId: number, rememberMe: boolean = false) {
  const sessionToken = generateSessionToken();
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ - 30 ‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤ remember me, 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà
  const expiresAt = new Date(Date.now() + (rememberMe ? 30 * 24 * 60 * 60 * 1000 : 60 * 60 * 1000));
  
  // ‡πÑ‡∏°‡πà‡∏•‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤ - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ login ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
  // await prisma.userSession.updateMany({
  //   where: { 
  //     employeeId,
  //     isActive: true 
  //   },
  //   data: { 
  //     isActive: false 
  //   }
  // });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
  const session = await prisma.userSession.create({
    data: {
      employeeId,
      sessionToken,
      userAgent: "legacy", // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ legacy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
      ipAddress: "legacy", // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ legacy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
      expiresAt,
      isActive: true
    }
  });
  
  return session;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
export async function validateSession(sessionToken: string): Promise<SessionData | null> {
  try {
    console.log("üîç validateSession - Looking for session with token:", sessionToken.substring(0, 10) + "...");
    
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ cleanup session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô
    await cleanupExpiredSessions();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà inactive) ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    const allSessions = await prisma.userSession.findMany({
      where: { sessionToken },
      select: { id: true, isActive: true, expiresAt: true, createdAt: true, employeeId: true }
    });
    
    console.log("üîç validateSession - All sessions with this token:", allSessions);
    
    const session = await prisma.userSession.findUnique({
      where: { 
        sessionToken,
        isActive: true 
      },
      include: {
        employee: {
          include: {
            department: true,
            position: true
          }
        }
      }
    });
    
    if (!session) {
      console.log("‚ùå validateSession - No active session found");
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const inactiveSession = await prisma.userSession.findUnique({
        where: { sessionToken },
        select: { id: true, isActive: true, expiresAt: true, createdAt: true }
      });
      
      if (inactiveSession) {
        console.log("üîç validateSession - Found inactive session:", {
          id: inactiveSession.id,
          isActive: inactiveSession.isActive,
          expired: new Date() > inactiveSession.expiresAt,
          expiresAt: inactiveSession.expiresAt,
          createdAt: inactiveSession.createdAt
        });
      } else {
        console.log("üîç validateSession - No session found with this token at all");
      }
      
      return null;
    }
    
    console.log("üîç validateSession - Session found for employee:", session.employee.email);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (new Date() > session.expiresAt) {
      console.log("‚ùå validateSession - Session expired, deactivating");
      await prisma.userSession.update({
        where: { id: session.id },
        data: { isActive: false }
      });
      return null;
    }
    
    console.log("‚úÖ validateSession - Session is still valid, expires at:", session.expiresAt);
    
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device fingerprint - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ login ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏¢‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.employee.status !== 'active') {
      await prisma.userSession.update({
        where: { id: session.id },
        data: { isActive: false }
      });
      return null;
    }
    
    // Auto-refresh session ‡∏ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const timeLeft = session.expiresAt.getTime() - new Date().getTime();
    const fifteenMinutes = 15 * 60 * 1000;
    
    if (timeLeft < fifteenMinutes) {
      // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ session - 30 ‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô long-term session, 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà
      const isLongTermSession = session.expiresAt.getTime() - session.createdAt.getTime() > 24 * 60 * 60 * 1000; // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô
      const newExpiresAt = new Date(Date.now() + (isLongTermSession ? 30 * 24 * 60 * 60 * 1000 : 60 * 60 * 1000));
      
      await prisma.userSession.update({
        where: { id: session.id },
        data: { 
          expiresAt: newExpiresAt,
          lastActivity: new Date()
        }
      });
      
      console.log("Session auto-refreshed for user:", session.employee.email);
    } else {
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó lastActivity ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
      const timeSinceLastActivity = new Date().getTime() - session.lastActivity.getTime();
      const fiveMinutes = 5 * 60 * 1000;
      
      if (timeSinceLastActivity > fiveMinutes) {
        await prisma.userSession.update({
          where: { id: session.id },
          data: { lastActivity: new Date() }
        });
      }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session data
    return {
      id: session.employee.id,
      employeeID: session.employee.employeeID,
      email: session.employee.email,
      name: session.employee.name,
      nickname: session.employee.nickname || "",
      department: session.employee.department?.nameTh || "",
      position: session.employee.position?.nameTh || "",
      imageUrl: session.employee.imageUrl,
      mustChangePassword: session.employee.mustChangePassword,
      titlePrefix: session.employee.titlePrefix,
      ppPhone: session.employee.ppPhone,
      wPhone: session.employee.wPhone,
      birthday: session.employee.birthday ? session.employee.birthday.toISOString().slice(0, 10) : null,
      departmentId: session.employee.departmentId,
      positionId: session.employee.positionId,
      address: session.employee.address,
      dayOff: session.employee.dayOff,
      educationLevel: session.employee.educationLevel,
      university: session.employee.university,
      major: session.employee.major,
      bankName: session.employee.bankName,
      bankAccountNumber: session.employee.bankAccountNumber,
      socialSecurityStart: session.employee.socialSecurityStart ? session.employee.socialSecurityStart.toISOString().slice(0, 10) : null,
    };
  } catch (error) {
    console.error('Session validation error:', error);
    return null;
  }
}

// ‡∏•‡∏ö session
export async function deleteSession(sessionToken: string) {
  try {
    await prisma.userSession.updateMany({
      where: { sessionToken },
      data: { isActive: false }
    });
  } catch (error) {
    console.error('Delete session error:', error);
  }
}

// ‡∏•‡∏ö session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
export async function cleanupExpiredSessions() {
  try {
    await prisma.userSession.updateMany({
      where: {
        expiresAt: { lt: new Date() },
        isActive: true
      },
      data: { isActive: false }
    });
  } catch (error) {
    console.error('Cleanup expired sessions error:', error);
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export async function hasOtherActiveSessions(employeeId: number, currentSessionId: string): Promise<boolean> {
  try {
    const count = await prisma.userSession.count({
      where: {
        employeeId,
        isActive: true,
        id: { not: currentSessionId }
      }
    });
    return count > 0;
  } catch (error) {
    console.error('Check other sessions error:', error);
    return false;
  }
}

// Refresh session ‡πÅ‡∏•‡∏∞ extend expire time
export async function refreshSession(sessionToken: string): Promise<boolean> {
  try {
    const session = await prisma.userSession.findUnique({
      where: { 
        sessionToken,
        isActive: true 
      }
    });
    
    if (!session) {
      return false;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (new Date() > session.expiresAt) {
      await prisma.userSession.update({
        where: { id: session.id },
        data: { isActive: false }
      });
      return false;
    }
    
    // Extend expire time - 30 ‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô long-term session, 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà
    const isLongTermSession = session.expiresAt.getTime() - session.createdAt.getTime() > 24 * 60 * 60 * 1000; // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô
    const newExpiresAt = new Date(Date.now() + (isLongTermSession ? 30 * 24 * 60 * 60 * 1000 : 60 * 60 * 1000));
    
    await prisma.userSession.update({
      where: { id: session.id },
      data: { 
        expiresAt: newExpiresAt,
        lastActivity: new Date()
      }
    });
    
    return true;
  } catch (error) {
    console.error('Refresh session error:', error);
    return false;
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ)
export async function isSessionNearExpiry(sessionToken: string): Promise<boolean> {
  try {
    const session = await prisma.userSession.findUnique({
      where: { 
        sessionToken,
        isActive: true 
      }
    });
    
    if (!session) {
      return true;
    }
    
    const now = new Date();
    const timeLeft = session.expiresAt.getTime() - now.getTime();
    const tenMinutes = 10 * 60 * 1000; // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    
    return timeLeft < tenMinutes;
  } catch (error) {
    console.error('Check session expiry error:', error);
    return true;
  }
}
