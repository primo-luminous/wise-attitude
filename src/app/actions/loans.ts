// src/actions/loans.ts
"use server";

import { prisma } from "@/lib/db";
import { revalidatePath } from "next/cache";
import { getCurrentUser } from "@/actions/auth";

/* =========================
   ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ö‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà
========================= */

type CreateLoanInput = {
  borrowerId: number;
  dueDate?: string | null;
  note?: string | null;
};

type CreateLoanState = { ok: boolean; loanId: number | null; error: string | null };

export async function createLoan(input: CreateLoanInput): Promise<CreateLoanState> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, loanId: null, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };

  const borrower = await prisma.employee.findUnique({
    where: { id: input.borrowerId },
    select: { id: true, status: true },
  });
  if (!borrower) return { ok: false, loanId: null, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" };
  if (borrower.status !== "active") {
    return { ok: false, loanId: null, error: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ active" };
  }

  const loan = await prisma.loan.create({
    data: {
      borrowerId: borrower.id,
      status: "OPEN",
      dueDate: input.dueDate ? new Date(input.dueDate) : null,
      note: input.note || null,
    },
    select: { id: true },
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  try {
    const borrowerInfo = await prisma.employee.findUnique({
      where: { id: borrower.id },
      select: { name: true }
    });

    if (borrowerInfo) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingNotification = await prisma.notification.findFirst({
        where: {
          type: 'LOAN_CREATED',
          data: {
            path: ['loanId'],
            equals: loan.id
          },
          createdAt: {
            gte: new Date(Date.now() - 60000) // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          }
        }
      });

      if (existingNotification) {
        console.log("üîî Notification already exists for this loan creation, skipping");
      } else {
        const employees = await prisma.employee.findMany({
          select: { id: true },
          where: { status: 'active' }
        });

        const notifications = employees.map((emp: { id: number }) => ({
          employeeId: emp.id,
          type: 'LOAN_CREATED' as const,
          title: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
          message: `${borrowerInfo.name} ‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà #${loan.id}`,
          data: { loanId: loan.id, borrowerName: borrowerInfo.name }
        }));

        await prisma.notification.createMany({
          data: notifications,
        });

        console.log(`üîî Created ${notifications.length} notifications for new loan: #${loan.id}`);
      }
    }
  } catch (error) {
    console.error("Error creating loan notification:", error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á loan
  }

  revalidatePath("/main/loans");
  return { ok: true, loanId: loan.id, error: null };
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState (prevState, formData) */
export async function createLoanByForm(
  _prev: CreateLoanState,
  formData: FormData
): Promise<CreateLoanState> {
  "use server";
  const borrowerId = Number(formData.get("borrowerId"));
  const dueDate = (formData.get("dueDate") as string) || null;
  const note = (formData.get("note") as string) || null;

  if (!borrowerId) return { ok: false, loanId: null, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°" };
  return createLoan({ borrowerId, dueDate, note });
}

/* =========================
   ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÉ‡∏ö‡∏¢‡∏∑‡∏°
========================= */

type AddLoanItemInput = {
  loanId: number;
  assetId: number;
  assetUnitId?: number;    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö SN
  quantity?: number;       // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
  startAt?: string | null;
  dueAt?: string | null;
};

type AddLoanItemState = { ok: boolean; error?: string | null };

export async function addLoanItem(input: AddLoanItemInput): Promise<AddLoanItemState & { item?: { id: number; assetId: number; assetUnitId: number | null; quantity: number; startAt: Date | null; dueAt: Date | null } }> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, error: "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå" };

  const { loanId, assetId, assetUnitId, quantity = 1, startAt, dueAt } = input;

  // 1) ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ö‡∏¢‡∏∑‡∏°
  const loan = await prisma.loan.findUnique({
    where: { id: loanId },
    select: { id: true, status: true },
  });
  if (!loan) return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏¢‡∏∑‡∏°" };
  if (loan.status !== "OPEN") return { ok: false, error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏¢‡∏∑‡∏°‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" };

  // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô
  const asset = await prisma.asset.findUnique({
    where: { id: assetId },
    select: { isSerialized: true, status: true },
  });
  if (!asset) return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô" };
  if (asset.status !== "ACTIVE") return { ok: false, error: "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" };

  if (asset.isSerialized && !assetUnitId) {
    return { ok: false, error: "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Serial Number" };
  }

  // 3) ‡∏ï‡∏£‡∏ß‡∏à SN (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SN)
  if (asset.isSerialized && assetUnitId) {
    const unit = await prisma.assetUnit.findUnique({
      where: { id: assetUnitId },
      include: { loanItem: true },
    });
    if (!unit) return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö Serial Number" };
    if (unit.status !== "ACTIVE") return { ok: false, error: "SN ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" };
    if (unit.loanItem && unit.loanItem.returnedAt == null) {
      return { ok: false, error: "SN ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà" };
    }
  }

  // 4) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  try {
    const item = await prisma.loanItem.create({
      data: {
        loanId,
        assetId,
        assetUnitId: assetUnitId ?? null,
        quantity: asset.isSerialized ? 1 : quantity,
        startAt: startAt ? new Date(startAt) : null,
        dueAt: dueAt ? new Date(dueAt) : null,
      },
    });

    // revalidate ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    revalidatePath(`/main/loans/${loanId}`);
    revalidatePath(`/main/loans`);
    revalidatePath(`/main/assets`);

    return { ok: true, item };
  } catch (e: unknown) {
    if (e && typeof e === 'object' && 'code' in e && (e as { code: string }).code === "P2002") {
      return { ok: false, error: "SN ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" };
    }
    return { ok: false, error: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" };
  }
}

/** helper: ‡πÅ‡∏õ‡∏•‡∏á FormData ‚Üí Input ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */
function parseAddLoanItemForm(formData: FormData): AddLoanItemInput {
  const loanId = Number(formData.get("loanId"));
  const assetId = Number(formData.get("assetId"));
  const quantity = Number(formData.get("quantity") ?? 1) || 1;
  const rawUnit = formData.get("assetUnitId");
  const assetUnitId = rawUnit ? Number(rawUnit) : undefined;
  const startAt = (formData.get("startAt") as string) || null;
  const dueAt = (formData.get("dueAt") as string) || null;
  return { loanId, assetId, assetUnitId, quantity, startAt, dueAt };
}

/** ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å "‡∏ï‡∏£‡∏á" ‡∏à‡∏≤‡∏Å client: addLoanItemByForm(formData) */
export async function addLoanItemByForm(formData: FormData) {
  "use server";
  const input = parseAddLoanItemForm(formData);
  if (!input.loanId || !input.assetId) return { ok: false, error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" };
  return addLoanItem(input);
}

/** ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState: (prevState, formData) */
export async function addLoanItemByFormState(
  _prev: AddLoanItemState | null,
  formData: FormData
) {
  "use server";
  const input = parseAddLoanItemForm(formData);
  if (!input.loanId || !input.assetId) return { ok: false, error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" };
  return addLoanItem(input);
}

/* =========================
   ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
========================= */

type UpdateLoanStatusInput = {
  loanId: number;
  status: 'OPEN' | 'USE' | 'CLOSED' | 'OVERDUE' | 'CANCELLED';
};

type UpdateLoanStatusState = { ok: boolean; error: string | null };

export async function updateLoanStatus(input: UpdateLoanStatusInput): Promise<UpdateLoanStatusState> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ loan ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  const existingLoan = await prisma.loan.findUnique({
    where: { id: input.loanId },
    include: {
      borrower: {
        select: { name: true }
      }
    }
  });

  if (!existingLoan) {
    return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (existingLoan.status === input.status) {
    return { ok: false, error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á" };
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  await prisma.loan.update({
    where: { id: input.loanId },
    data: { status: input.status }
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
  try {
    const statusMessages = {
      'OPEN': '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      'USE': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      'CLOSED': '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
      'OVERDUE': '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
      'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    await prisma.notification.create({
      data: {
        employeeId: user.id,
        type: 'LOAN_STATUS_CHANGED',
        title: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
        message: `‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${input.loanId} ‡∏Ç‡∏≠‡∏á ${existingLoan.borrower.name} ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å ${statusMessages[existingLoan.status as keyof typeof statusMessages]} ‡πÄ‡∏õ‡πá‡∏ô ${statusMessages[input.status]}`,
        data: { 
          loanId: input.loanId, 
          borrowerName: existingLoan.borrower.name,
          oldStatus: existingLoan.status,
          newStatus: input.status
        }
      }
    });

    console.log(`üîî Created 1 notification for loan status change: ${existingLoan.status} -> ${input.status}`);
  } catch (error) {
    console.error("Error creating loan status notification:", error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  }

  revalidatePath("/main/loans");
  revalidatePath(`/main/loans/${input.loanId}`);
  return { ok: true, error: null };
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState (prevState, formData) */
export async function updateLoanStatusByForm(
  _prev: UpdateLoanStatusState,
  formData: FormData
): Promise<UpdateLoanStatusState> {
  "use server";
  const loanId = Number(formData.get("id"));
  const status = formData.get("status") as 'OPEN' | 'USE' | 'CLOSED' | 'OVERDUE' | 'CANCELLED';

  if (!loanId || !status) {
    return { ok: false, error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" };
  }

  return updateLoanStatus({ loanId, status });
}

/* =========================
   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
========================= */

type UpdateLoanInput = {
  loanId: number;
  borrowerId?: number;
  dueDate?: string | null;
  note?: string | null;
};

type UpdateLoanState = { ok: boolean; error: string | null };

export async function updateLoan(input: UpdateLoanInput): Promise<UpdateLoanState> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const existingLoan = await prisma.loan.findUnique({
      where: { id: input.loanId },
      include: {
        borrower: { select: { name: true } }
      }
    });

    if (!existingLoan) {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if (existingLoan.status === 'CLOSED' || existingLoan.status === 'CANCELLED') {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö borrower ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (input.borrowerId) {
      const borrower = await prisma.employee.findUnique({
        where: { id: input.borrowerId },
        select: { id: true, status: true, name: true },
      });
      
      if (!borrower) {
        return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" };
      }
      
      if (borrower.status !== "active") {
        return { ok: false, error: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ active" };
      }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    const updateData: {
      borrowerId?: number;
      dueDate?: Date | null;
      note?: string | null;
    } = {};
    if (input.borrowerId !== undefined) updateData.borrowerId = input.borrowerId;
    if (input.dueDate !== undefined) updateData.dueDate = input.dueDate ? new Date(input.dueDate) : null;
    if (input.note !== undefined) updateData.note = input.note;

    await prisma.loan.update({
      where: { id: input.loanId },
      data: updateData
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification (‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingNotification = await prisma.notification.findFirst({
        where: {
          type: 'SYSTEM',
          data: {
            path: ['loanId'],
            equals: input.loanId
          },
          message: {
            contains: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${input.loanId}`
          },
          createdAt: {
            gte: new Date(Date.now() - 60000) // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          }
        }
      });

      if (existingNotification) {
        console.log("üîî Notification already exists for this loan update, skipping");
      } else {
        const employees = await prisma.employee.findMany({
          where: { status: 'active' },
          select: { id: true }
        });

        const notifications = employees.map((emp: { id: number }) => ({
          employeeId: emp.id,
          type: 'SYSTEM' as const,
          title: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
          message: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${input.loanId} ‡∏Ç‡∏≠‡∏á ${existingLoan.borrower.name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç`,
          data: { 
            loanId: input.loanId, 
            borrowerName: existingLoan.borrower.name,
            updatedFields: Object.keys(updateData)
          }
        }));

        await prisma.notification.createMany({
          data: notifications,
        });

        console.log(`üîî Created ${notifications.length} notifications for loan update: #${input.loanId}`);
      }
    } catch (error) {
      console.error("Error creating loan update notification:", error);
    }

    revalidatePath("/main/loans");
    revalidatePath(`/main/loans/${input.loanId}`);
    return { ok: true, error: null };

  } catch (error) {
    console.error("Error updating loan:", error);
    return { ok: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
  }
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState (prevState, formData) */
export async function updateLoanByForm(
  _prev: UpdateLoanState,
  formData: FormData
): Promise<UpdateLoanState> {
  "use server";
  const loanId = Number(formData.get("loanId"));
  const borrowerId = formData.get("borrowerId") ? Number(formData.get("borrowerId")) : undefined;
  const dueDate = formData.get("dueDate") as string | null;
  const note = formData.get("note") as string | null;

  if (!loanId) {
    return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
  }

  return updateLoan({ loanId, borrowerId, dueDate, note });
}

/* =========================
   ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
========================= */

type DeleteLoanState = { ok: boolean; error: string | null };

export async function deleteLoan(loanId: number): Promise<DeleteLoanState> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const existingLoan = await prisma.loan.findUnique({
      where: { id: loanId },
      include: {
        borrower: { select: { name: true } },
        items: { select: { id: true } }
      }
    });

    if (!existingLoan) {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    if (existingLoan.items.length > 0) {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if (existingLoan.status === 'CLOSED') {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß" };
    }

    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    await prisma.loan.delete({
      where: { id: loanId }
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification
    try {
      const employees = await prisma.employee.findMany({
        where: { status: 'active' },
        select: { id: true }
      });

      const notifications = employees.map((emp: { id: number }) => ({
        employeeId: emp.id,
        type: 'SYSTEM' as const,
        title: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
        message: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${loanId} ‡∏Ç‡∏≠‡∏á ${existingLoan.borrower.name} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`,
        data: { 
          loanId: loanId, 
          borrowerName: existingLoan.borrower.name
        }
      }));

      await prisma.notification.createMany({
        data: notifications,
      });
    } catch (error) {
      console.error("Error creating loan delete notification:", error);
    }

    revalidatePath("/main/loans");
    return { ok: true, error: null };

  } catch (error) {
    console.error("Error deleting loan:", error);
    return { ok: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
  }
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState (prevState, formData) */
export async function deleteLoanByForm(
  _prev: DeleteLoanState,
  formData: FormData
): Promise<DeleteLoanState> {
  "use server";
  const loanId = Number(formData.get("loanId"));

  if (!loanId) {
    return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
  }

  return deleteLoan(loanId);
}

/* =========================
   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
========================= */

type UpdateLoanItemInput = {
  loanItemId: number;
  assetId: number;
  quantity?: number;
  assetUnitId?: number | null;
  startAt?: string | null;
  dueAt?: string | null;
  returnedAt?: string | null;
  note?: string | null;
};

type UpdateLoanItemState = { ok: boolean; error: string | null };

export async function updateLoanItem(input: UpdateLoanItemInput): Promise<UpdateLoanItemState> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const existingLoanItem = await prisma.loanItem.findUnique({
      where: { id: input.loanItemId },
      include: {
        loan: {
          include: {
            borrower: { select: { name: true } }
          }
        },
        asset: { select: { name: true, sku: true } }
      }
    });

    if (!existingLoanItem) {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° - ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if (existingLoanItem.loan.status === 'CLOSED' || existingLoanItem.loan.status === 'CANCELLED') {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà
    const newAsset = await prisma.asset.findUnique({
      where: { id: input.assetId },
      include: {
        units: {
          where: { status: 'ACTIVE' },
          select: { id: true, serialNumber: true }
        },
        loanItems: {
          where: { returnedAt: null },
          select: { quantity: true }
        }
      }
    });

    if (!newAsset) {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
    if (newAsset.status !== 'ACTIVE') {
      return { ok: false, error: "‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ACTIVE" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if (newAsset.isSerialized) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Serial Number
      if (!input.assetUnitId) {
        return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Serial Number" };
      }

      const selectedUnit = newAsset.units.find((unit: { id: number }) => unit.id === input.assetUnitId);
      if (!selectedUnit) {
        return { ok: false, error: "Serial Number ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" };
      }
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Serial Number
      if (!input.quantity || input.quantity <= 0) {
        return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      const borrowedQty = newAsset.loanItems.reduce((sum: number, item: { quantity: number }) => sum + item.quantity, 0);
      const availableQty = newAsset.totalQty - borrowedQty;
      
      if (input.quantity > availableQty) {
        return { ok: false, error: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${availableQty} ‡∏ä‡∏¥‡πâ‡∏ô)` };
      }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    const updateData: {
      assetId: number;
      quantity?: number;
      assetUnitId?: number | null;
      startAt?: Date | null;
      dueAt?: Date | null;
      returnedAt?: Date | null;
      note?: string | null;
    } = {
      assetId: input.assetId,
      note: input.note
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° startAt, dueAt ‡πÅ‡∏•‡∏∞ returnedAt ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (input.startAt !== undefined) {
      updateData.startAt = input.startAt ? new Date(input.startAt) : null;
    }
    if (input.dueAt !== undefined) {
      updateData.dueAt = input.dueAt ? new Date(input.dueAt) : null;
    }
    if (input.returnedAt !== undefined) {
      updateData.returnedAt = input.returnedAt ? new Date(input.returnedAt) : null;
    }

    if (newAsset.isSerialized) {
      updateData.assetUnitId = input.assetUnitId;
      updateData.quantity = 1; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Serial Number ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏™‡∏°‡∏≠
    } else {
      updateData.quantity = input.quantity;
      updateData.assetUnitId = null;
    }

    await prisma.loanItem.update({
      where: { id: input.loanItemId },
      data: updateData
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification (‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingNotification = await prisma.notification.findFirst({
        where: {
          type: 'SYSTEM',
          data: {
            path: ['loanId'],
            equals: existingLoanItem.loan.id
          },
          message: {
            contains: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${existingLoanItem.loan.id}`
          },
          createdAt: {
            gte: new Date(Date.now() - 60000) // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          }
        }
      });

      if (existingNotification) {
        console.log("üîî Notification already exists for this loan item update, skipping");
      } else {
        const employees = await prisma.employee.findMany({
          where: { status: 'active' },
          select: { id: true }
        });

        const notifications = employees.map((emp: { id: number }) => ({
          employeeId: emp.id,
          type: 'SYSTEM' as const,
          title: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
          message: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${existingLoanItem.loan.id} ‡∏Ç‡∏≠‡∏á ${existingLoanItem.loan.borrower.name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏à‡∏≤‡∏Å ${existingLoanItem.asset.name} ‡πÄ‡∏õ‡πá‡∏ô ${newAsset.name}`,
          data: {
            loanId: existingLoanItem.loan.id,
            borrowerName: existingLoanItem.loan.borrower.name,
            oldAsset: existingLoanItem.asset.name,
            newAsset: newAsset.name
          }
        }));

        await prisma.notification.createMany({
          data: notifications,
        });

        console.log(`üîî Created ${notifications.length} notifications for loan item update: #${existingLoanItem.loan.id}`);
      }
    } catch (error) {
      console.error("Error creating loan item update notification:", error);
    }

    revalidatePath("/main/loans");
    revalidatePath(`/main/loans/${existingLoanItem.loan.id}`);
    return { ok: true, error: null };

  } catch (error) {
    console.error("Error updating loan item:", error);
    return { ok: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå" };
  }
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState (prevState, formData) */
export async function updateLoanItemByForm(
  _prev: UpdateLoanItemState,
  formData: FormData
): Promise<UpdateLoanItemState> {
  "use server";
  
  const loanItemId = Number(formData.get("loanItemId"));
  const assetId = Number(formData.get("assetId"));
  const quantity = formData.get("quantity") ? Number(formData.get("quantity")) : undefined;
  const assetUnitId = formData.get("assetUnitId") ? Number(formData.get("assetUnitId")) : null;
  const startAt = formData.get("startAt") as string | null;
  const dueAt = formData.get("dueAt") as string | null;
  const returnedAt = formData.get("returnedAt") as string | null;
  const note = formData.get("note") as string | null;

  if (!loanItemId || !assetId) {
    return { ok: false, error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" };
  }

  return updateLoanItem({
    loanItemId,
    assetId,
    quantity,
    assetUnitId,
    startAt,
    dueAt,
    returnedAt,
    note
  });
}

/* =========================
   ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
========================= */

type DeleteLoanItemState = { ok: boolean; error: string | null };

export async function deleteLoanItem(loanItemId: number): Promise<DeleteLoanItemState> {
  const user = await getCurrentUser();
  if (!user) return { ok: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const existingLoanItem = await prisma.loanItem.findUnique({
      where: { id: loanItemId },
      include: {
        loan: {
          include: {
            borrower: { select: { name: true } }
          }
        },
        asset: { select: { name: true, sku: true } }
      }
    });

    if (!existingLoanItem) {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° - ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if (existingLoanItem.loan.status === 'CLOSED' || existingLoanItem.loan.status === 'CANCELLED') {
      return { ok: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß" };
    }

    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    await prisma.loanItem.delete({
      where: { id: loanItemId }
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification
    try {
      const employees = await prisma.employee.findMany({
        where: { status: 'active' },
        select: { id: true }
      });

      const notifications = employees.map((emp: { id: number }) => ({
        employeeId: emp.id,
        type: 'SYSTEM' as const,
        title: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
        message: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #${existingLoanItem.loan.id} ‡∏Ç‡∏≠‡∏á ${existingLoanItem.loan.borrower.name} ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ${existingLoanItem.asset.name}`,
        data: {
          loanId: existingLoanItem.loan.id,
          borrowerName: existingLoanItem.loan.borrower.name,
          deletedAsset: existingLoanItem.asset.name
        }
      }));

      await prisma.notification.createMany({
        data: notifications,
      });
    } catch (error) {
      console.error("Error creating loan item delete notification:", error);
    }

    revalidatePath("/main/loans");
    revalidatePath(`/main/loans/${existingLoanItem.loan.id}`);
    return { ok: true, error: null };

  } catch (error) {
    console.error("Error deleting loan item:", error);
    return { ok: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå" };
  }
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö useActionState (prevState, formData) */
export async function deleteLoanItemByForm(
  _prev: DeleteLoanItemState,
  formData: FormData
): Promise<DeleteLoanItemState> {
  "use server";
  
  const loanItemId = Number(formData.get("loanItemId"));

  if (!loanItemId) {
    return { ok: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" };
  }

  return deleteLoanItem(loanItemId);
}
