generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          Int        @id @default(autoincrement()) @map("d_id")
  nameEn      String     @unique @map("d_name_en")
  nameTh      String     @unique @map("d_name_th")
  description String?    @map("d_description")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
  positions   Position[]

  @@map("department")
}

model Position {
  id           Int         @id @default(autoincrement()) @map("p_id")
  nameEn       String      @unique @map("p_name_en")
  nameTh       String      @unique @map("p_name_th")
  description  String?     @map("p_description")
  level        Int         @default(1) @map("p_level")
  departmentId Int?        @map("p_department")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  employees    Employee[]
  department   Department? @relation(fields: [departmentId], references: [id])

  @@index([departmentId])
  @@map("position")
}

model Employee {
  id                  Int                  @id @default(autoincrement()) @map("em_id")
  employeeID          String               @unique @map("em_employeeID")
  titlePrefix         String?              @map("em_titlePrefix")
  name                String               @map("em_name")
  nickname            String?              @map("em_nickname")
  citizenID           String?              @unique @map("em_citizenID")
  email               String               @unique @map("em_email")
  mustChangePassword  Boolean              @default(false)
  passwordHash        String               @map("em_password")
  imageUrl            String?              @map("em_Image")
  ppPhone             String?              @map("em_pp_phone")
  wPhone              String?              @map("em_w_phone")
  birthday            DateTime?            @map("em_birthday")
  status              EmployeeStatus       @default(active) @map("em_status")
  departmentId        Int?                 @map("em_department")
  positionId          Int?                 @map("em_position")
  address             String?              @map("em_address")
  dayOff              String?              @map("em_day_off")
  educationLevel      String?              @map("em_education_level")
  major               String?              @map("em_major")
  bankName            String?              @map("em_bank_name")
  bankAccountNumber   String?              @map("em_bank_account_number")
  socialSecurityStart DateTime?            @map("em_ss_start")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  university          String?              @map("em_university")
  department          Department?          @relation(fields: [departmentId], references: [id])
  position            Position?            @relation(fields: [positionId], references: [id])
  loans               Loan[]               @relation("EmployeeLoans")
  resetTokens         PasswordResetToken[]
  userSessions        UserSession[]
  notifications       Notification[]

  @@index([email])
  @@index([employeeID])
  @@index([departmentId])
  @@index([positionId])
  @@map("employee")
}

model AssetCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]

  @@map("asset_category")
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  contact   String?
  email     String?
  phone     String?
  address   String?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]

  @@map("supplier")
}

model Asset {
  id             Int            @id @default(autoincrement())
  sku            String         @unique
  name           String
  categoryId     Int?
  description    String?
  imageUrl       String?
  isSerialized   Boolean        @default(false)
  totalQty       Int            @default(0)
  status         AssetStatus    @default(ACTIVE)
  purchasePrice  Decimal?       @db.Decimal(12, 2)
  purchaseDate   DateTime?
  warrantyMonths Int?
  warrantyUntil  DateTime?
  supplierId     Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  category       AssetCategory? @relation(fields: [categoryId], references: [id])
  supplier       Supplier?      @relation(fields: [supplierId], references: [id])
  units          AssetUnit[]
  loanItems      LoanItem[]

  @@index([name])
  @@index([sku])
  @@index([supplierId])
  @@index([purchaseDate])
  @@index([warrantyUntil])
  @@map("asset")
}

model AssetUnit {
  id           Int         @id @default(autoincrement())
  assetId      Int
  serialNumber String      @unique
  note         String?
  status       AssetStatus @default(ACTIVE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  asset        Asset       @relation(fields: [assetId], references: [id])
  loanItem     LoanItem?

  @@index([assetId])
  @@map("asset_unit")
}

model Loan {
  id         Int        @id @default(autoincrement())
  borrowerId Int
  status     LoanStatus @default(OPEN)
  startDate  DateTime   @default(now())
  dueDate    DateTime?
  note       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  borrower   Employee   @relation("EmployeeLoans", fields: [borrowerId], references: [id])
  items      LoanItem[]

  @@index([borrowerId])
  @@index([status])
  @@index([dueDate])
  @@map("loan")
}

model LoanItem {
  id               Int        @id @default(autoincrement())
  loanId           Int
  assetId          Int
  quantity         Int        @default(1)
  quantityReturned Int        @default(0)
  assetUnitId      Int?       @unique
  startAt          DateTime?
  dueAt            DateTime?
  returnedAt       DateTime?
  note             String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  asset            Asset      @relation(fields: [assetId], references: [id])
  assetUnit        AssetUnit? @relation(fields: [assetUnitId], references: [id])
  loan             Loan       @relation(fields: [loanId], references: [id])

  @@index([loanId])
  @@index([assetId])
  @@index([dueAt])
  @@map("loan_item")
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  token      String   @unique
  employeeId Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([expiresAt])
  @@map("password_reset_token")
}

model UserSession {
  id           String   @id @default(cuid())
  employeeId   Int
  sessionToken String   @unique
  userAgent    String   // Browser user agent
  ipAddress    String?  // IP address
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_session")
}

model Notification {
  id          String           @id @default(cuid())
  employeeId  Int
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  data        Json?            // Additional data (loan ID, asset ID, etc.)
  createdAt   DateTime         @default(now())
  readAt      DateTime?
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notification")
}

enum EmployeeStatus {
  active
  inactive
  suspended
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  LOST
  BROKEN
}

enum LoanStatus {
  OPEN
  USE
  CLOSED
  OVERDUE
  CANCELLED
}

enum NotificationType {
  LOAN_CREATED
  LOAN_RETURNED
  LOAN_OVERDUE
  LOAN_STATUS_CHANGED
  ASSET_ADDED
  ASSET_UPDATED
  SYSTEM
}
